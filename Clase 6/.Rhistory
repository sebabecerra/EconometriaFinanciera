library(readxl)
DolarHistorico <- read_excel("~/Downloads/DolarHistorico.xls",
sheet = "Export", col_types = c("date",
"numeric"))
DolarHistorico <- ts(DolarHistorico[,2], frequency=365, start=c(1982, 219))
plot(DolarHistorico,type='l')
head(DolarHistorico)
#Retorno logaritmico
DolarHistorico_roc_l=ROC(DolarHistorico, type='continuous')
head(DolarHistorico_roc_l)
plot(DolarHistorico_roc_l, type="l")
# Serie en logaritmo
CLP_X_log=log(DolarHistorico)
# Autocorrelaci?n y autocorrelaci?n parcial
acf(CLP_X_log)
pacf(CLP_X_log)
modelo_1=arima(CLP_X_log, order=c(1,0,0))
modelo_1
serie_dif=diff(CLP_X_log)
adf.test(serie_dif, alternative = 'stationary')
# cargar librer?as
library(quantmod)
library(tseries)
library(lmtest)
library(forecast)
library(lubridate)
library(readxl)
library(tidyverse)
library(lubridate)
library(tseries)
library(xts)
library(zoo)
library(reshape)
library(ggplot2)
library(readxl)
DolarHistorico <- read_excel("~/Downloads/DolarHistorico.xls",
sheet = "Export", col_types = c("date",
"numeric"))
DolarHistorico <- ts(DolarHistorico[,2], frequency=365, start=c(1982, 219))
plot(DolarHistorico,type='l')
head(DolarHistorico)
DolarHistorico_roc_l=ROC(DolarHistorico, type='continuous')
head(DolarHistorico_roc_l)
plot(DolarHistorico_roc_l, type="l")
# Serie en logaritmo
CLP_X_log=log(DolarHistorico)
# Autocorrelaci?n y autocorrelaci?n parcial
acf(CLP_X_log)
pacf(CLP_X_log)
# Modelo AR(1)
modelo_1=arima(CLP_X_log, order=c(1,0,0))
modelo_1
coeftest(modelo_1)
confint(modelo_1)
AIC(modelo_1)
BIC(modelo_1)
e1=residuals(modelo_1)
summary(e1)
absserr_1=abs(e1)
summary(absserr_1)
serie_dif=diff(CLP_X_log)
# test de estacionariedad
adf.test(serie_dif, alternative = 'stationary')
# cargar librer?as
library(quantmod)
library(tseries)
library(lmtest)
library(forecast)
library(lubridate)
#Tutorial Como importar datos de Yahoo Finance a RStudio
mdate="2014-09-17"
BTC_USD_prices=getSymbols('BTC-USD', from=mdate, auto.assign = F)
print(BTC_USD_prices)
mdate="2014-09-17"
BTC_USD_prices_1=getSymbols('BTC-USD', from=mdate, auto.assign = F)[,4]
head(BTC_USD_prices_1)
plot(BTC_USD_prices_1)
#Retorno discreto
BTC_USD_prices_1_roc_d=ROC(BTC_USD_prices_1, type='discret')
head(BTC_USD_prices_1_roc_d)
plot(BTC_USD_prices_1_roc_d)
# otro tipo de gr?fico
chartSeries(BTC_USD_prices_1)
chartSeries(BTC_USD_prices_1, subset ="last 3 months")
# Serie en logaritmo
BTC_USD_log=log(BTC_USD_prices_1)
# Serie en logaritmo
BTC_USD_log=log(BTC_USD_prices_1)
# Autocorrelaci?n y autocorrelaci?n parcial
acf(BTC_USD_prices_1) # Para MA
pacf(BTC_USD_prices_1) # Para AR
# Modelo AR(1)
modelo_1=arima(BTC_USD_log, order=c(1,0,0))
modelo_1
coeftest(modelo_1)
confint(modelo_1)
AIC(modelo_1)
BIC(modelo_1)
e1=residuals(modelo_1)
summary(e1)
absserr_1=abs(e1)
summary(absserr_1)
modelo_1_pred <-forecast::forecast(modelo_1,h=10, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
# Modelo AR(2)
modelo_2=arima(BTC_USD_log, order=c(2,0,0))
modelo_2
coeftest(modelo_2)
confint(modelo_2)
AIC(modelo_2)
BIC(modelo_2)
e2=residuals(modelo_2)
summary(e2)
absserr_2=abs(e2)
summary(absserr_2)
# cargar librerias
library(quantmod)
library(tseries)
library(lmtest)
library(forecast)
library(lubridate)
#library(rugarch)
# Descargar datos
mdate="1990-03-26"
CPE_prices=getSymbols('CPE', from=mdate, auto.assign = F)[,4]
head(CPE_prices)
plot(CPE_prices)
# otro tipo de gr?fico
chartSeries(CPE_prices)
chartSeries(CPE_prices, subset ="last 3 months")
# Serie en logaritmo
CPE_prices_log=log(CPE_prices)
# a) Serie estacionaria
adf.test(CPE_prices_log, alternative = 'stationary')
#p-value = 0.08584
# No es estacionaria
# Calculamos la primera diferencia
seriedif=diff(CPE_prices_log)
adf.test(seriedif[2:(length(seriedif)-1)], alternative = 'stationary')
#p-value = 0.01
# Es estacionaria
# b) Identificar el orden
# Autocorrelaci?n y autocorrelaci?n parcial
acf(CPE_prices_log) # Para MA
pacf(CPE_prices_log) # Para AR
# Seria un modelo AR(1) al log del precio
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
pacf(seriedif[2:(length(seriedif)-1),]) # Para AR
# Seria un modelo ARIMA(1,1,1)
# Declarar la serie de tiempo de precios
dim(Precio_Exportciones_Petroleo_Mexicano)
setwd("/Users/rodrigoortiz/Dropbox/Profesor cursos/UAI/Econometría Financiera/Clases Rodrigo/III T 2022/Clase 6");
dim(Precio_Exportciones_Petroleo_Mexicano)
library(readxl)
Precio_Exportciones_Petroleo_Mexicano <- read_excel("Precio Exportciones Petroleo Mexicano.xls",
sheet = "Precios")
View(Precio_Exportciones_Petroleo_Mexicano)
# Declarar la serie de tiempo de precios
dim(Precio_Exportciones_Petroleo_Mexicano)
library(readxl)
Precio_Exportciones_Petroleo_Mexicano <- read_excel("Salidas en R/Precio Exportciones Petroleo Mexicano.xls")
View(Precio_Exportciones_Petroleo_Mexicano)
dim(Precio_Exportciones_Petroleo_Mexicano)
precios=Precio_Exportciones_Petroleo_Mexicano[,2]
arimar.ts=ts(precios, start = c(2013,1), frequency=12)
arimar.ts
precios_log=log(arimar.ts)
adf.test(precios_log, alternative = 'stationary')
#p-value = 0.7714
# No es estacionaria
# Calculamos la primera diferencia
seriedif_m=diff(precios_log)
adf.test(seriedif_m, alternative = 'stationary')
setwd("/Users/rodrigoortiz/Dropbox/Profesor cursos/UAI/Econometría Financiera/Clases Rodrigo/III T 2022/Clase 6");
# cargar librerias
library(quantmod)
library(tseries)
library(lmtest)
library(forecast)
library(lubridate)
#library(rugarch)
# Descargar datos
mdate="1990-03-26"
CPE_prices=getSymbols('CPE', from=mdate, auto.assign = F)[,4]
head(CPE_prices)
plot(CPE_prices)
chartSeries(CPE_prices)
chartSeries(CPE_prices, subset ="last 3 months")
# Serie en logaritmo
CPE_prices_log=log(CPE_prices)
adf.test(CPE_prices_log, alternative = 'stationary')
seriedif=diff(CPE_prices_log)
adf.test(seriedif[2:(length(seriedif)-1)], alternative = 'stationary')
adf.test(CPE_prices_log, alternative = 'stationary')
adf.test(seriedif[2:(length(seriedif)-1)], alternative = 'stationary')
# b) Identificar el orden
# Autocorrelacion y autocorrelacion parcial
acf(CPE_prices_log) # Para MA
pacf(CPE_prices_log) # Para AR
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
pacf(seriedif[2:(length(seriedif)-1),]) # Para AR
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
pacf(seriedif[2:(length(seriedif)-1),]) # Para AR
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
pacf(seriedif[2:(length(seriedif)-1),]) # Para AR
# Modelo AR(1)
modelo_1=arima(CPE_prices_log, order=c(1,0,0))
modelo_1
tsdiag(modelo_1)
Box.test(residuals(modelo_1),type="Ljung-Box")
modelo_1_pred <-forecast::forecast(modelo_1,h=10, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
#####################################
# Paso 3 Evaluacion del modelo
#####################################
tsdiag(modelo_1)
modelo_2=arima(CPE_prices_log, order=c(1,1,1))
modelo_2
tsdiag(modelo_2)
Box.test(residuals(modelo_2),type="Ljung-Box")
modelo_2_pred <-forecast::forecast(modelo_1,h=10, level=c(99.5))
modelo_2_pred
# Modelo ARIMA(2,1,1)
modelo_3=arima(CPE_prices_log, order=c(2,1,1))
modelo_3
tsdiag(modelo_3)
Box.test(residuals(modelo_3),type="Ljung-Box")
# Modelo ARIMA(3,1,1)
modelo_4=arima(CPE_prices_log, order=c(3,1,1))
modelo_4
tsdiag(modelo_4)
Box.test(residuals(modelo_4),type="Ljung-Box")
# Modelo ARIMA(4,1,2)
modelo_5=arima(CPE_prices_log, order=c(4,1,2))
modelo_5
tsdiag(modelo_5)
Box.test(residuals(modelo_5),type="Ljung-Box")
library(readxl)
Precio_Exportciones_Petroleo_Mexicano <- read_excel("Salidas en R/Precio Exportciones Petroleo Mexicano.xls")
View(Precio_Exportciones_Petroleo_Mexicano)
# Declarar la serie de tiempo de precios
dim(Precio_Exportciones_Petroleo_Mexicano)
precios=Precio_Exportciones_Petroleo_Mexicano[,2]
arimar.ts=ts(precios, start = c(2013,1), frequency=12)
arimar.ts
precios_log=log(arimar.ts)
adf.test(precios_log, alternative = 'stationary')
seriedif_m=diff(precios_log)
adf.test(seriedif_m, alternative = 'stationary')
seriedif_m2=diff(precios_log, differences=2)
adf.test(seriedif_m2, alternative = 'stationary')
# b) Identificar el orden
# Autocorrelacion y autocorrelaci?n parcial
acf(seriedif_m2) # Para MA
pacf(seriedif_m2) # Para AR
# Modelo ARIMA(1,2,1)
modelo_6=arima(precios_log, order=c(1,2,1))
modelo_6
#####################################
tsdiag(modelo_6)
Box.test(residuals(modelo_6),type="Ljung-Box")
modelo_6_pred <-forecast::forecast(modelo_6,h=10, level=c(99.5))
modelo_6_pred
modelo_2=arima(CPE_prices_log, order=c(1,1,1))
modelo_2
tsdiag(modelo_2)
Box.test(residuals(modelo_2),type="Ljung-Box")
# cargar librerias
library(quantmod)
library(tseries)
library(lmtest)
library(forecast)
library(lubridate)
#library(rugarch)
# Descargar datos
mdate="1990-03-26"
CPE_prices=getSymbols('CPE', from=mdate, auto.assign = F)[,4]
head(CPE_prices)
plot(CPE_prices)
# otro tipo de grafico
chartSeries(CPE_prices)
chartSeries(CPE_prices, subset ="last 3 months")
# Serie en logaritmo
CPE_prices_log=log(CPE_prices)
adf.test(CPE_prices_log, alternative = 'stationary')
seriedif=diff(CPE_prices_log)
adf.test(seriedif[2:(length(seriedif)-1)], alternative = 'stationary')
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
pacf(seriedif[2:(length(seriedif)-1),]) # Para AR
modelo_2=arima(CPE_prices_log, order=c(1,1,1))
modelo_2
tsdiag(modelo_2)
library(readxl)
Precio_Exportciones_Petroleo_Mexicano <- read_excel("Salidas en R/Precio Exportciones Petroleo Mexicano.xls",
sheet = "Precios")
View(Precio_Exportciones_Petroleo_Mexicano)
# Declarar la serie de tiempo de precios
dim(Precio_Exportciones_Petroleo_Mexicano)
precios=Precio_Exportciones_Petroleo_Mexicano[,2]
arimar.ts=ts(precios, start = c(2013,1), frequency=12)
arimar.ts
plot(arimar.ts)
# Serie en logaritmo
precios_log=log(arimar.ts)
adf.test(precios_log, alternative = 'stationary')
seriedif_m=diff(precios_log)
adf.test(seriedif_m, alternative = 'stationary')
seriedif_m2=diff(precios_log, differences=2)
adf.test(seriedif_m2, alternative = 'stationary')
acf(seriedif_m2) # Para MA
pacf(seriedif_m2) # Para AR
acf(seriedif_m2) # Para MA
pacf(seriedif_m2) # Para AR
acf(seriedif_m2) # Para MA
# Modelo ARIMA(1,2,1)
modelo_6=arima(precios_log, order=c(1,2,1))
modelo_6
modelo_6_pred <-forecast::forecast(modelo_6,h=5, level=c(99.5))
modelo_6_pred
plot(modelo_6_pred)
modelo_6_pred <-forecast::forecast(modelo_6,h=10000, level=c(99.5))
modelo_6_pred
plot(modelo_6_pred)
# Descargar datos
mdate="1990-03-26"
CPE_prices=getSymbols('CPE', from=mdate, auto.assign = F)[,4]
head(CPE_prices)
plot(CPE_prices)
# otro tipo de grafico
chartSeries(CPE_prices)
chartSeries(CPE_prices, subset ="last 3 months")
# Serie en logaritmo
CPE_prices_log=log(CPE_prices)
#####################################
# Paso 1 Identificacion del modelo
#####################################
# a) Serie estacionaria
adf.test(CPE_prices_log, alternative = 'stationary')
# H0 la series no es estacionaria (raiz unitaria)
# H1 la series es estacionaria
#p-value = 0.08584
# Como p value = 0.08584 > 1% entonces no se rechaza H0,
#es decir, la serie es no es estacionaria
# Calculamos la primera diferencia
seriedif=diff(CPE_prices_log)
adf.test(seriedif[2:(length(seriedif)-1)], alternative = 'stationary')
# H0 la series no es estacionaria (raiz unitaria)
# H1 la series es estacionaria
#p-value = 0.01
# Como p value = 0.01 < 1% entonces se rechaza H0,
#es decir, la serie es estacionaria
# b) Identificar el orden
# Autocorrelacion y autocorrelacion parcial
acf(CPE_prices_log) # Para MA
pacf(CPE_prices_log) # Para AR
# Seria un modelo AR(1) al log del precio
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
pacf(seriedif[2:(length(seriedif)-1),]) # Para AR
# Seria un modelo ARIMA(1,1,1)
#####################################
# Paso 2 Estimacion del modelo
#####################################
# Modelo AR(1)
modelo_1=arima(CPE_prices_log, order=c(1,0,0))
modelo_1
#####################################
# Paso 3 Evaluacion del modelo
#####################################
tsdiag(modelo_1)
Box.test(residuals(modelo_1),type="Ljung-Box")
# H0: Las autocorrelaciones son independientes
# H1: Las autocorrelaciones no son independientes
# p-value = 4.109e-05
# como pvalue = 4.109e-05 <1% entonces se rechaza H0,
# por tanto no hay ruido blanco, MODELO INADECUADO
#####################################
# Paso 4 Realización de pronósticos con el modelo
#####################################
modelo_1_pred <-forecast::forecast(modelo_1,h=10000, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
# Modelo ARIMA(1,1,1)
modelo_2=arima(CPE_prices_log, order=c(1,1,1))
modelo_2
tsdiag(modelo_2)
Box.test(residuals(modelo_2),type="Ljung-Box")
# H0: Las autocorrelaciones son independientes
# H1: Las autocorrelaciones no son independientes
# p-value = 0.9972
# como pvalue = 0.9972 < 10 % entonces no se rechaza H0,
# por tanto hay ruido blanco, MODELO ADECUADO
modelo_2_pred <-forecast::forecast(modelo_1,h=10, level=c(99.5))
modelo_2_pred
plot(modelo_2_pred)
# Modelo ARIMA(2,1,1)
modelo_3=arima(CPE_prices_log, order=c(2,1,1))
modelo_3
tsdiag(modelo_3)
Box.test(residuals(modelo_3),type="Ljung-Box")
# Modelo ARIMA(3,1,1)
modelo_4=arima(CPE_prices_log, order=c(3,1,1))
modelo_4
tsdiag(modelo_4)
Box.test(residuals(modelo_4),type="Ljung-Box")
# Modelo ARIMA(4,1,2)
modelo_5=arima(CPE_prices_log, order=c(4,1,2))
modelo_5
tsdiag(modelo_5)
Box.test(residuals(modelo_5),type="Ljung-Box")
#####################################
#####################################
# Mas de una diferencia
#####################################
#####################################
# Descargar datos
# Importar los datos desde archivo excel entregado
# Declarar la serie de tiempo de precios
dim(Precio_Exportciones_Petroleo_Mexicano)
precios=Precio_Exportciones_Petroleo_Mexicano[,2]
arimar.ts=ts(precios, start = c(2013,1), frequency=12)
arimar.ts
plot(arimar.ts)
# Serie en logaritmo
precios_log=log(arimar.ts)
#####################################
# Paso 1 Identificacion del modelo
#####################################
# a) Serie estacionaria
adf.test(precios_log, alternative = 'stationary')
#p-value = 0.7714
# No es estacionaria
# Calculamos la primera diferencia
seriedif_m=diff(precios_log)
adf.test(seriedif_m, alternative = 'stationary')
#p-value = 0.167
# No es estacionaria
# Calculamos la segunda diferencia
seriedif_m2=diff(precios_log, differences=2)
adf.test(seriedif_m2, alternative = 'stationary')
#p-value = 0.01
# Es estacionaria
# b) Identificar el orden
# Autocorrelacion y autocorrelaci?n parcial
acf(seriedif_m2) # Para MA
pacf(seriedif_m2) # Para AR
modelo_1_pred <-forecast::forecast(modelo_1,h=10000, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
modelo_1_pred <-forecast::forecast(modelo_1,h=10000, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
modelo_1_pred <-forecast::forecast(modelo_1,h=5, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
modelo_1_pred <-forecast::forecast(modelo_1,h=10, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
modelo_1_pred <-forecast::forecast(modelo_1,h=15, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
p-value = 4.109e-05
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
library(quantmod)
library(tseries)
library(lmtest)
library(forecast)
library(lubridate)
#library(rugarch)
# Descargar datos
mdate="1990-03-26"
CPE_prices=getSymbols('CPE', from=mdate, auto.assign = F)[,4]
head(CPE_prices)
plot(CPE_prices)
# otro tipo de grafico
chartSeries(CPE_prices)
chartSeries(CPE_prices, subset ="last 3 months")
# Serie en logaritmo
CPE_prices_log=log(CPE_prices)
adf.test(CPE_prices_log, alternative = 'stationary')
seriedif=diff(CPE_prices_log)
adf.test(seriedif[2:(length(seriedif)-1)], alternative = 'stationary')
# H0 la series no es estacionaria (raiz unitaria)
# H1 la series es estacionaria
acf(CPE_prices_log) # Para MA
pacf(CPE_prices_log) # Para AR
# Seria un modelo AR(1) al log del precio
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
pacf(seriedif[2:(length(seriedif)-1),]) # Para AR
acf(seriedif[2:(length(seriedif)-1),]) # Para MA
pacf(seriedif[2:(length(seriedif)-1),]) # Para AR
modelo_1=arima(CPE_prices_log, order=c(1,0,0))
modelo_1
#####################################
# Paso 3 Evaluacion del modelo
#####################################
tsdiag(modelo_1)
Box.test(residuals(modelo_1),type="Ljung-Box")
modelo_1_pred <-forecast::forecast(modelo_1,h=15, level=c(99.5))
modelo_1_pred
plot(modelo_1_pred)
modelo_2=arima(CPE_prices_log, order=c(1,1,1))
modelo_2
tsdiag(modelo_2)
Box.test(residuals(modelo_2),type="Ljung-Box")
modelo_2_pred <-forecast::forecast(modelo_1,h=10, level=c(99.5))
modelo_2_pred
plot(modelo_2_pred)
modelo_2_pred <-forecast::forecast(modelo_1,h=10000, level=c(99.5))
modelo_2_pred
plot(modelo_2_pred)
